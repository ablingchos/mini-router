// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0(customized by red@2023-12-12)
// - protoc             (unknown)
// source: pkg/proto/consumerpb/consumer.proto

package consumerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerServiceClient is the client API for ConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerServiceClient interface {
	ConsumerInit(ctx context.Context, in *ConsumerInitRequest, opts ...grpc.CallOption) (*ConsumerInitReply, error)
	RoutingChange(ctx context.Context, in *RoutingChangeRequest, opts ...grpc.CallOption) (ConsumerService_RoutingChangeClient, error)
	PullEndpoint(ctx context.Context, in *PullEndpointRequest, opts ...grpc.CallOption) (*PullEndpointReply, error)
}

type consumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerServiceClient(cc grpc.ClientConnInterface) ConsumerServiceClient {
	return &consumerServiceClient{cc}
}

func (c *consumerServiceClient) ConsumerInit(ctx context.Context, in *ConsumerInitRequest, opts ...grpc.CallOption) (*ConsumerInitReply, error) {
	out := new(ConsumerInitReply)
	err := c.cc.Invoke(ctx, "/consumerpb.ConsumerService/ConsumerInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) RoutingChange(ctx context.Context, in *RoutingChangeRequest, opts ...grpc.CallOption) (ConsumerService_RoutingChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsumerService_ServiceDesc.Streams[0], "/consumerpb.ConsumerService/RoutingChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerServiceRoutingChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsumerService_RoutingChangeClient interface {
	Recv() (*RoutingChangeReply, error)
	grpc.ClientStream
}

type consumerServiceRoutingChangeClient struct {
	grpc.ClientStream
}

func (x *consumerServiceRoutingChangeClient) Recv() (*RoutingChangeReply, error) {
	m := new(RoutingChangeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consumerServiceClient) PullEndpoint(ctx context.Context, in *PullEndpointRequest, opts ...grpc.CallOption) (*PullEndpointReply, error) {
	out := new(PullEndpointReply)
	err := c.cc.Invoke(ctx, "/consumerpb.ConsumerService/PullEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServiceServer is the server API for ConsumerService service.
// All implementations must embed UnimplementedConsumerServiceServer
// for forward compatibility
type ConsumerServiceServer interface {
	ConsumerInit(context.Context, *ConsumerInitRequest) (*ConsumerInitReply, error)
	RoutingChange(*RoutingChangeRequest, ConsumerService_RoutingChangeServer) error
	PullEndpoint(context.Context, *PullEndpointRequest) (*PullEndpointReply, error)
	mustEmbedUnimplementedConsumerServiceServer()
}

// UnimplementedConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServiceServer struct {
}

func (UnimplementedConsumerServiceServer) ConsumerInit(context.Context, *ConsumerInitRequest) (*ConsumerInitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerInit not implemented")
}
func (UnimplementedConsumerServiceServer) RoutingChange(*RoutingChangeRequest, ConsumerService_RoutingChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method RoutingChange not implemented")
}
func (UnimplementedConsumerServiceServer) PullEndpoint(context.Context, *PullEndpointRequest) (*PullEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullEndpoint not implemented")
}
func (UnimplementedConsumerServiceServer) mustEmbedUnimplementedConsumerServiceServer() {}

// UnsafeConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServiceServer will
// result in compilation errors.
type UnsafeConsumerServiceServer interface {
	mustEmbedUnimplementedConsumerServiceServer()
}

func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	s.RegisterService(&ConsumerService_ServiceDesc, srv)
}

func _ConsumerService_ConsumerInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).ConsumerInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumerpb.ConsumerService/ConsumerInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).ConsumerInit(ctx, req.(*ConsumerInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_RoutingChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoutingChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServiceServer).RoutingChange(m, &consumerServiceRoutingChangeServer{stream})
}

type ConsumerService_RoutingChangeServer interface {
	Send(*RoutingChangeReply) error
	grpc.ServerStream
}

type consumerServiceRoutingChangeServer struct {
	grpc.ServerStream
}

func (x *consumerServiceRoutingChangeServer) Send(m *RoutingChangeReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ConsumerService_PullEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).PullEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumerpb.ConsumerService/PullEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).PullEndpoint(ctx, req.(*PullEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerService_ServiceDesc is the grpc.ServiceDesc for ConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumerpb.ConsumerService",
	HandlerType: (*ConsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumerInit",
			Handler:    _ConsumerService_ConsumerInit_Handler,
		},
		{
			MethodName: "PullEndpoint",
			Handler:    _ConsumerService_PullEndpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RoutingChange",
			Handler:       _ConsumerService_RoutingChange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/consumerpb/consumer.proto",
}
